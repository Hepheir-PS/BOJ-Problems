(새로운 데이터, 예측값):
(11,48), (-4,-27), (-9,-52), (+2,3), (-10,-57), (-2,-17), (0,-7), (-3,-22), (1,-2), (-6,-37), (-7,-42), (-5,-32), (-8,-47), (-1,-12)


1. 새로운 데이터에 대한 목표값(예측값)

x'      y'

11      48
-4      -27
-9      -52
+2      3
-10     -57
-2      -17
0       -7
-3      -22
1       -2
-6      -37
-7      -42
-5      -32
-8      -47
-1      -12


2. 문제 해결방법은 다음과 같습니다.


[문제 해결 방법]

Python3을 사용하여 Tensorflow(2.5.0)와 Keras를 사용하여 문제를 해결하였습니다.


[선형회귀 분석 딥러닝 모델 정보]

모델은 1개의 Dense 층으로만 이루어져 있으며, 활성함수로 선형함수를 사용하는 선형회귀 모델입니다.
모델의 정보를 Python 프로그램 상에서 요약하여 출력하면 다음과 같습니다.


Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
dense (Dense)                (None, 1)                 2
=================================================================
Total params: 2
Trainable params: 2
Non-trainable params: 0
_________________________________________________________________



[모델의 훈련]

모델은 총 256세대(epoch)에 걸쳐 훈련되었습니다.
같은 데이터로 여러번 반복하여 훈련을 함으로써 모델의 정확도 향상을 기대할 수 있습니다.

모델이 얼마나 정확한지를 평가하는 척도로는 손실률(loss)이 있습니다.
loss가 적을 수록 모델의 신뢰도가 높아지죠.

모델이 특정 데이터에만 과하게 학습되는 현상인 오버피팅(overfitting)이 발생할 위험성이 있으나,
본 모델이 해결해야 할 과제가 매우 단순한, 낮은 차수의 방정식이기에,
모델이 안정화되고 손실률이 0에 최대한 가까이 수렴 할 수 있도록 충분한 epoch, 즉, 256회의 반복 학습이 필요하다고 판단하였습니다.
물론, 데이터는 `shuffle`옵션을 통해 무작위 순으로 선별되어 학습에 사용되었습니다.


<훈련(학습)기록 별첨: PROBLEM_6-train-log.txt>


[훈련된 모델의 예측값]

위의 훈련을 거친 모델을 통해, 완전히 새로운 데이터의 목표값을 예측할 수 있습니다.
새로운 데이터(x')에 따른 모델의 예측값(y')는 다음과 같습니다.


x: +11 ,        y: +48  (+48.048248),   ans: 48
x: -4  ,        y: -27  (-26.960201),   ans: -27
x: -9  ,        y: -52  (-51.963020),   ans: -52
x: +2  ,        y: +3   (+3.043178),    ans: 3
x: -10 ,        y: -57  (-56.963577),   ans: -57
x: -2  ,        y: -17  (-16.959076),   ans: -17
x: +0  ,        y: -7   (-6.957949),    ans: -7
x: -3  ,        y: -22  (-21.959639),   ans: -22
x: +1  ,        y: -2   (-1.957386),    ans: -2
x: -6  ,        y: -37  (-36.961327),   ans: -37
x: -7  ,        y: -42  (-41.961891),   ans: -42
x: -5  ,        y: -32  (-31.960764),   ans: -32
x: -8  ,        y: -47  (-46.962456),   ans: -47
x: -1  ,        y: -12  (-11.958511),   ans: -12


<Python 프로그램 소스코드 및 라이브러리 정보 첨부: PROBLEM_6-solution.py, PROBLEM_6-requirements.txt>


[검증]

머신러닝 모델의 한계로 언제나 완전한 정답만을 출력하지는 않습니다.
앞서 생성한 선형회귀 모델이 예측한 값이 정답인지 검증하기 위해서 수작업으로 값을 한 번 더 계산해 볼 것입니다.

문제에 주어진 설명 변수와 목표 변수 중 3개의 쌍을 뽑아, 분류 직선의 식을 구해볼 것입니다.

>>> x=5, y=18
>>> x=-15, y=-82

식이 y=ax+b라고 할 때,
1번식과 2번식을 연립하여 a와 b의 값을 특정할 수 있습니다.

>>> 18 = 5a + b
>>> -82 = -15a + b

∴ a = 5
∴ b = -7

따라서 분류 직선의 식은 y=5x-7이 됩니다.
이 식이 올바른지 확인을 위해 추가로 하나의 설명 변수와 목표 변수 쌍을 대입해 봅니다.

>>> x=7, y=28

-> (맞음) 28 = 7*5-7

앞선 과정을 통해 얻은 식 y=5x-7을 통해, 선형회귀모델의 예측값과, 본래 나와야 할 정답과의 오차를 비교해봅니다.

...

모두 정답이었습니다.
감사합니다.
